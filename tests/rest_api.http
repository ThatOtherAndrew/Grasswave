###
POST http://localhost:2031/execute
Content-Type: text/plain

mod_freq = ConstantNode(.5)
modulator = SineNode()
mod_gain = ConstantNode(50)
multiply = MultiplyNode()
add = AddNode()
avg_freq = ConstantNode(440)
link mod_freq.out -> modulator.frequency
link modulator.out -> multiply.a
link mod_gain.out -> multiply.b
link multiply.out -> add.a
link avg_freq.out -> add.b
sine = SineNode()
link add.out -> sine.frequency

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

###
POST http://localhost:2031/nodes/output
Content-Type: application/json

{
  "type": "PlaybackNode",
  "args": [],
  "kwargs": {}
}

###
GET http://localhost:2031/nodes

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

###
GET http://localhost:2031/nodes/sine

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

###
GET http://localhost:2031/connections

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

###
PATCH http://localhost:2031/connections
Content-Type: application/json

{
  "source": {
    "node_name": "sine",
    "port_name": "out"
  },
  "sink": {
    "node_name": "output",
    "port_name": "left"
  }
}

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}
